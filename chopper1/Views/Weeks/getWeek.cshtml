@model chopper1.Models.Week

@{

    ViewBag.Title = Model.Note;
    int weekNumInt = Convert.ToInt32(ViewBag.WeekId);
    string dayVariantList = "";
    string chButtonClass = "channelSideButtons";

}

<!--<h2>@Model.Note</h2>-->
<div class="papers">
    <div class="row weekPickerContainer">
        <div class="col-lg-1 visible-lg"></div>
        <div class="col-lg-1 weekPickerArrow visible-lg">
            <a href="@Url.Action("getWeek", "Weeks", new { week_num = (weekNumInt-1).ToString()}, null)">
                <span class="weekPickerIcon glyphicon glyphicon-backward" style="color:black; float:right"></span>
            </a>
        </div>
        <div id="weekSelectContainer" class="col-lg-8">@{Html.RenderAction("SelectCategory", "Weeks", new { curWeekRef = Model.Ref });}</div>
        <div class="col-lg-1 weekPickerArrow visible-lg">
            <a href="@Url.Action("getWeek", "Weeks", new { week_num = (weekNumInt+1).ToString()}, null)">
                <span class="weekPickerIcon glyphicon glyphicon-forward" style="color:black"></span>
            </a>
        </div>
        <div class="col-lg-1 visible-lg"></div>
    </div>
    <div class="row visible-lg">
        <div class="col-lg-9"></div>
        <div class="col-lg-2">
            <p id="timestampDiv">@DateTime.Now.ToString("dd/MM/yyyy") @DateTime.Now.ToString("HH:mm:ss")</p>
        </div>
        <div class="col-lg-1"></div>
    </div>
    <div class="row week_bg">
        <div class="col-lg-1 visible-lg noPadding">
            @{Html.RenderAction("DrawTimeScale", "Day", new { left = true, channelCode = 10 });}
        </div>
        @{
            var i = 0;
            double dayRectWidth = 100.0 / Convert.ToDouble(Model.DaysCount) - 0.00001;
            string dayRectWidthStr = dayRectWidth.ToString("#.########").Replace(",", ".") + "%";
        }
        <div id="daysDiv" class="col-lg-10 noPadding">
            @foreach (chopper1.ws1c.WeekTVDayType day in Model.Days)
            {
                dayVariantList += day.TVDate.ToString("dd.MM.yyyy") + "_" + day.VariantKod + "_" + day.KanalKod + ";";
                <div id="@day.TVDayRef" class="dayrect" data-chcode="@day.KanalKod" data-tvdate="@day.TVDate.ToString("dd.MM.yyyy")" data-varnum="@day.VariantKod" ondrop="drop(event)" ondragover="allowDrop(event)" style="width: @dayRectWidthStr;">
                    @{Html.RenderAction("ConstructDay", "Day", day);}
                </div>
                    i += 1;
            }
        </div>
        @{
            dayVariantList = dayVariantList.Substring(0, dayVariantList.Length - 1);
        }
        <div class="col-lg-1 visible-lg noPadding">
            @{Html.RenderAction("DrawTimeScale", "Day", new { left = false, channelCode = 10 });}
        </div>
    </div>
</div>


@if (Model.AvailableChannels.Contains(10) & Model.AvailableChannels.Count()>1)
 {
    if (Model.Days[0].KanalKod == 10)
    {
        chButtonClass = "channelSideButtons channelSelected";
    }
    else
    {
        chButtonClass = "channelSideButtons channelNotSelected";
    }
<div class="@chButtonClass" id="chOneButton" data-reporttype="raskladka">
    <a href="@Url.Action("WeekChosen", "Weeks", new { weekID = weekNumInt.ToString(), reptype="raskladka", chCode="10"}, null)">
        <img src="~/Content/images/logos/chOne_logo_square.png" style="width:100px" />
    </a>
</div>
}
 @if (Model.AvailableChannels.Contains(21))
 {
     if (Model.Days[0].KanalKod == 21)
     {
         chButtonClass = "channelSideButtons channelSelected";
     }
     else
     {
         chButtonClass = "channelSideButtons channelNotSelected";
     }
<div class="@chButtonClass" id="rtrButton" data-reporttype="raskladka">
    <a href="@Url.Action("WeekChosen", "Weeks", new { weekID = weekNumInt.ToString(), reptype="raskladka", chCode="21"}, null)">
        <img src="~/Content/images/logos/rtr_white.png" style="width:60px" />
    </a>
</div>
 }
 @if (Model.AvailableChannels.Contains(40))
 {
     if (Model.Days[0].KanalKod == 40)
     {
         chButtonClass = "channelSideButtons channelSelected";
     }
     else
     {
         chButtonClass = "channelSideButtons channelNotSelected";
     }
<div class="@chButtonClass" id="ntvButton" data-reporttype="raskladka">
    <a href="@Url.Action("WeekChosen", "Weeks", new { weekID = weekNumInt.ToString(), reptype="raskladka", chCode="40"}, null)">
        <img src="~/Content/images/logos/ntv_white.png" style="width:40px" />
    </a>
</div>    
 }

<div class="rightSideButtons visible-lg">
    <a id="rtfDownloadLink" href="@Url.Action("Download", "Weeks", new { dayVariantList = dayVariantList, repType = "raskladka" }, null)">
        <div class="sideButtons" id="rtfButton" data-reporttype="raskladka">
           <span>.rtf</span>    
        </div>
    </a>
</div>

<div id="progFlyoutHandle">
    <span class="glyphicon glyphicon-transfer"></span>
</div>
<div id="progFlyout">

</div>



@section scripts {
    <script src="~/Scripts/jquery-2.0.0.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>    


    <script>
        var menu = document.getElementById("context-menu");
        var menuState = 0;
        var active = "context-menu--active";
        var menuPosition;
        var menuPositionX;
        var menuPositionY;
        var menuWidth;
        var menuHeight;
        var windowWidth;
        var windowHeight;
        var clickCoords;
        var clickCoordsX;
        var clickCoordsY;

        var dayRects = document.getElementsByClassName("dayrect");

        for (var i = 0, len = dayRects.length; i < len; i++) {
            var dayRect = dayRects[i];
            contextMenuListener(dayRect);
        };

        clickListener();
        //resizeListener();
        /*
        document.getElementsByClassName('dayrect').addEventListener('contextmenu', function (ev) {
            ev.preventDefault();
            toggleMenuOn();            
            return false;
        }, false);
        */
        function contextMenuListener(el) {
            el.addEventListener("contextmenu", function (e) {
                e.preventDefault();
                document.getElementById("context-menu-dayCaption").innerHTML = el.getAttribute("data-tvdate") + " (" + el.getAttribute("data-varnum") + ")";
                document.getElementById("context-menu-progCaption").innerHTML = rClickProgName;
                var newHref = "/AdvSearch/PerformAdvSearch?Title=" + rClickProgName;
                document.getElementById('context-menu-link-shareProg').setAttribute('href', newHref);
                var newDate = el.getAttribute("data-tvdate").substr(6, 4) + "-" + el.getAttribute("data-tvdate").substr(3, 2) + "-" + el.getAttribute("data-tvdate").substr(0, 2);
                newHref = "/Weeks/Broadcast?bdate=" + newDate + "\&variantNum=" + el.getAttribute("data-varnum");
                document.getElementById('context-menu-link-orb').setAttribute('href', newHref);
                newHref = "/Weeks/Ratings?bdate=" + newDate;
                document.getElementById('context-menu-link-shareDay').setAttribute('href', newHref);
                
                toggleMenuOn();
                positionMenu(e);
            });
        }
        function clickListener() {
            document.addEventListener("click", function (e) {
                //console.log("doc.click");
                var button = e.which || e.button;
                //console.log("button: " + button);
                if (button === 1) {
                    if (menuState == 0) {
                        var tempDays = document.getElementsByClassName("dayrectTemp");
                        for (var i = 0; i < tempDays.length; i++) {
                            tempDays[i].style.display = "none";
                        }
                    }
                    toggleMenuOff();

                    //console.log("Menu-off");
                }
                
            });
        }

        

        function toggleMenuOn() {
            if (menuState !== 1) {
                menuState = 1;
                
                menu.classList.add(active);                
                //console.log("MenuOn: "+menu.classList);
            }
        }

        function toggleMenuOff() {
            if (menuState !== 0) {
                menuState = 0;
                menu.classList.remove(active);
            }
        }

        function getPosition(e) {
            var posx = 0;
            var posy = 0;

            if (!e) var e = window.event;

            if (e.pageX || e.pageY) {
                posx = e.pageX;
                posy = e.pageY;
            } else if (e.clientX || e.clientY) {
                posx = e.clientX + document.body.scrollLeft +
                                   document.documentElement.scrollLeft;
                posy = e.clientY + document.body.scrollTop +
                                   document.documentElement.scrollTop;
            }

            return {
                x: posx,
                y: posy
            }
        }

        function positionMenu(e) {
            //console.log("ok so far");
            /*
            clickCoords = getPosition(e);
            clickCoordsX = clickCoords.x;
            clickCoordsY = clickCoords.y;

            

            menuWidth = menu.offsetWidth + 4;
            menuHeight = menu.offsetHeight + 4;
            windowWidth = window.innerWidth;
            windowHeight = window.innerHeight;
            

            if ((windowWidth - clickCoordsX) < menuWidth) {
                menu.style.left = windowWidth - menuWidth + "px";
            } else {
                menu.style.left = clickCoordsX + "px";
                console.log("width ok");
            }

            if ((windowHeight - clickCoordsY) < menuHeight) {
                menu.style.top = windowHeight - menuHeight + "px";
                console.log("windowHeight: " + windowHeight);
                console.log("clickCoordsY: " + clickCoordsY);
                console.log("menuHeight: " + menuHeight);
                console.log("menu.style.top: " + menu.style.top);
            } else {
                menu.style.top = clickCoordsY + "px";
                console.log("height ok");
            }
            */
            
            menuPosition = getPosition(e);
            menuPositionX = menuPosition.x + "px";
            menuPositionY = menuPosition.y + "px";

            menu.style.left = menuPositionX;
            menu.style.top = menuPositionY;
            
        }

        function resizeListener() {
            window.onresize = function (e) {
                toggleMenuOff();
            };
        }



        $("#progFlyoutHandle").click(function (evt) {

            if (document.getElementById("progFlyout").style.right == "-200px") {
                $.ajax({
                    type: 'GET',
                    cache: false,
                    url: '/Day/ConstructZapas',
                    success: function (data) {

                        document.getElementById('progFlyout').innerHTML = data;
                        //console.log(document.getElementById('progFlyout').innerHTML);
                        $("#progFlyoutHandle").animate({ right: "200px" }, 500);
                        $("#progFlyout").animate({ right: "0" }, 500);
                    }
                });
            }
            else
            {
                document.getElementById('progFlyout').innerHTML = "";
                $("#progFlyoutHandle").animate({ right: "0" }, 500);
                $("#progFlyout").animate({ right: "-200px" }, 500);
            }
        });

    $("#rtfButton").click(function () {

        var dUpdate = $.connection.dayUpdate;
        var repType = document.getElementById("printButton").dataset.reporttype;
        var weekId = document.getElementById("printButton").dataset.weekid;
        var dayVariantList = "";

        var dateDivs = document.getElementsByClassName("date-div");
        var varDivs = document.getElementsByClassName("varCode-div");

        for (var i = 0; i < dateDivs.length; i++) {
            dayVariantList += dateDivs[i].innerHTML + "_";
            var str = varDivs[i].id;
            var varCode = str.substring(3);
            dayVariantList += varCode;
            if (i != dateDivs.length - 1) {
                dayVariantList += ";";
            }
        }
        @*
            var url = '@Url.Action("Download", "Weeks")';
            $.post(url, { dayVariantList: dayVariantList, repType: "raskladka" },
            function () {
            });
            *@



        //console.log("RTF OK!");
        @*dUpdate.server.print(dayVariantList, repType, weekId, false, true, false);*@

    });
    </script>

    <script>



        $(function () {
            var dUpdate = $.connection.dayUpdate;
            var xmlhttp;
            xmlhttp = new XMLHttpRequest();


            dUpdate.client.broadcastMessage = function (tvdayref, varNum, serverTime) {
                console.log(serverTime);
                if (tvdayref != "") {
                    var xmlhttp;
                    xmlhttp = new XMLHttpRequest();

                    xmlhttp.onreadystatechange = function () {
                        if (xmlhttp.readyState == XMLHttpRequest.DONE) {
                            console.log(tvdayref + '-' + serverTime);
                            if (xmlhttp.status == 200) {

                                if (document.getElementById(tvdayref).getAttribute("data-varnum") == varNum) {
                                    document.getElementById(tvdayref).innerHTML = xmlhttp.responseText;                                    
                                    console.log("VariantNum Updated: "+document.getElementById(tvdayref).getAttribute("data-varnum"));
                                }
                                else
                                {
                                    console.log("Variant not found");
                                }


                                //document.getElementById(tvdayref).innerHTML = xmlhttp.responseText;
                                //document.getElementById("timestampDiv").innerHTML = serverTime;

                                
                            }
                            else if (xmlhttp.status == 400) {
                                console.log(xmlhttp.statusText);
                            }
                            else {
                                console.log(xmlhttp.statusText);
                                console.log(xmlhttp.responseText);
                            }
                        }
                    }
                    xmlhttp.open("POST", "UpdateDayWeek", true);
                    xmlhttp.setRequestHeader("dayID", tvdayref);
                    xmlhttp.setRequestHeader("varNum", varNum);
                    xmlhttp.send(tvdayref);
                }
            };

            /*Added 22/06/16*/
            $.connection.hub.disconnected(function () {
                console.log("reconnected at " + Date.now());
                setTimeout(function () {
                    $.connection.hub.start();
                }, 5000); // Restart connection after 5 seconds.
            });
            

            $.connection.hub.start().done(function () {
                var allDayRects1 = document.getElementsByClassName("dayrect");
                for (var i = 0; i < allDayRects1.length; i++) {
                    dUpdate.server.subscribe(allDayRects1.item(i).id);
                }
                setInterval(function () {
                    var allDayRects2 = document.getElementsByClassName("dayrect");
                    for (var i = 0; i < allDayRects2.length; i++) {
                        if (allDayRects1.item(i).id != allDayRects2.item(i).id) {
                            dUpdate.server.subscribe(allDayRects2.item(i).id);
                        }
                    }
                    allDayRects1 = allDayRects2;
                }, 3000);
            });
        });
    </script>
}
